<?xml version="1.0"?>
<doc>
    <assembly>
        <name>art-gallery-api</name>
    </assembly>
    <members>
        <member name="M:art_gallery_api.Controllers.ArtefactsController.GetAllArtefacts">
            <summary>
            Gets all artefacts.
            </summary>
            <returns>List of all artefacts</returns>
            <remarks>
            Sample request:
            GET /api/artefacts
            </remarks>
            <response code="200">Successful request</response>
        </member>
        <member name="M:art_gallery_api.Controllers.ArtefactsController.GetArtefactById(System.Int32)">
            <summary>
            Gets an artefact based on the specified id.
            </summary>
            <param name="id">ID of artefact.</param>
            <returns>Artefact based on the specified id</returns>
            <remarks>
            Sample request:
            GET /api/artefacts/1
            </remarks>
            <response code="200">Successful request</response>
        </member>
        <member name="M:art_gallery_api.Controllers.ArtefactsController.AddArtefact(art_gallery_api.Artefact)">
             <summary>
             Creates a new artefact.
             </summary>
             <param name="newArtefact">A new artefact from the HTTP request.</param>
             <returns>A newly created artefact</returns>
             <remarks>
             Sample request:
            
                 POST /api/artefacts
                 {
                    {
                         "Name":"Tasmania_Art",
                         "State": "Tasmania",
                         "PublishedYear": "2019",
                         "ArtType":
                         {
                             "Id": 1
                         },
                         "Artists": [
                         {
                             "Id":1
                         },
                         {
                             "Id":3
                         },
            
                             "Id":7
                         }
                         ]
                     }
                 }
            
             </remarks>
             <response code="201">Returns the newly created artefact</response>
             <response code="400">If the artefact in the parameter is null or one of the provided artist is null</response>
             <response code="409">If the exact same artefact already exists.</response>
        </member>
        <member name="M:art_gallery_api.Controllers.ArtefactsController.UpdateArtefact(System.Int32,art_gallery_api.Artefact)">
             <summary>
             Updates an existing artefact.
             </summary>
             <param name="id">ID of artefact to be updated</param>
             <param name="updatedArtefact">A new artefact from the HTTP request to replace the old artefact.</param>
             <returns>Status code 204</returns>
             <remarks>
             Sample request:
            
                 PUT /api/artefact/1
                 {
                    {
                         "Name":"Tasmania_Art",
                         "State": "Tasmania",
                         "PublishedYear": "2019",
                         "ArtType":
                         {
                             "Id": 1
                         },
                         "Artists": [
                         {
                             "Id":1
                         },
                         {
                             "Id":3
                         },
            
                             "Id":7
                         }
                         ]
                     }
                 }
            
             </remarks>
             <response code="204">Request has succeeded</response>
             <response code="400">If one or more of the provided artist does not exist, or if the updatedArtefact is null</response>
             <response code="404">If no artefact correspond to the provided ID</response>
             <response code="409">If the exact same artefact already exist.</response>
        </member>
        <member name="M:art_gallery_api.Controllers.ArtefactsController.DeleteArtefact(System.Int32)">
            <summary>
            Deletes an artefact.
            </summary>
            <param name="id">ID of artefact to be deleted</param>
            <returns>Status Code 204</returns>
            <remarks>
            Sample request:
            DELETE /api/artefacts/1
            </remarks>
            <response code="204">Request has succeeded</response>
            <response code="404">If no artefact correspond to the provided ID</response>
        </member>
        <member name="M:art_gallery_api.Controllers.ArtefactsController.DeleteArtist(System.Int32,System.Int32)">
            <summary>
            Deletes an artist within an artefact.
            </summary>
            <param name="artefactId">ID of the artefact whose artist is to be deleted</param>
            <param name="artistId">ID of the artist corresponding to be deleted</param>
            <returns>Status Code 204</returns>
            <remarks>
            Sample request:
            DELETE api/artefacts/artists/?artefactid=49&amp;artistid=3
            </remarks>
            <response code="204">Request has succeeded</response>
            <response code="404">If no artefact correspond to the provided ID</response>
        </member>
        <member name="M:art_gallery_api.Controllers.ArtefactsController.GetArtists(System.Int32)">
            <summary>
            Gets list artists of an artefact based on the specified id.
            </summary>
            <param name="artefactId">ID of artefact.</param>
            <returns>List of artists corresponding to the artefact based on the specified id</returns>
            <remarks>
            Sample request:
            GET /api/artefacts/artists/45
            </remarks>
            <response code="200">Successful request</response>
        </member>
        <member name="M:art_gallery_api.Controllers.ArtistsController.GetAllArtists">
            <summary>
            Gets all artists.
            </summary>
            <returns>List of all artists</returns>
            <remarks>
            Sample request:
            GET /api/artists
            </remarks>
            <response code="200">Successful request</response>
        </member>
        <member name="M:art_gallery_api.Controllers.ArtistsController.GetArtistById(System.Int32)">
            <summary>
            Gets an artist based on the specified id.
            </summary>
            <param name="id">ID of artist.</param>
            <returns>Artist based on the specified id</returns>
            <remarks>
            Sample request:
            GET /api/artists/1
            </remarks>
            <response code="200">Successful request</response>
        </member>
        <member name="M:art_gallery_api.Controllers.ArtistsController.GetArtefacts(System.Int32)">
            <summary>
            Gets list artefacts of an artist based on the specified id.
            </summary>
            <param name="artistId">ID of artist.</param>
            <returns>List of artefacts corresponding to the artist based on the specified id</returns>
            <remarks>
            Sample request:
            GET /api/artists/artefacts/1
            </remarks>
            <response code="200">Successful request</response>
        </member>
        <member name="M:art_gallery_api.Controllers.ArtistsController.AddArtist(art_gallery_api.Artist)">
             <summary>
             Creates a new artist.
             </summary>
             <param name="newArtist">A new artist from the HTTP request.</param>
             <returns>A newly created artist</returns>
             <remarks>
             Sample request:
            
                 POST /api/artists
                 {
                    {
                         "Name":"Betty Yuliani",
                         "DisplayStartYear": "2012",
                         "Artefacts": [
                         {
                             "Id":44
                         },
                         {
                             "Id":30
                         }
                         ]
                     }
                 }
            
             </remarks>
             <response code="201">Returns the newly created artist</response>
             <response code="400">If one or more of the provided artefact does not exist, or if the updated artist is null</response>
             <response code="409">If the exact same artist already exists.</response>
        </member>
        <member name="M:art_gallery_api.Controllers.ArtistsController.UpdateArtist(System.Int32,art_gallery_api.Artist)">
             <summary>
             Updates an existing artist.
             </summary>
             <param name="id">ID of artist to be updated</param>
             <param name="updatedArtist">A new artist from the HTTP request to replace the old artist.</param>
             <returns>Status code 204</returns>
             <remarks>
             Sample request:
            
                 PUT /api/artists/1
                 {
                    {
                         "Name":"Betty Yuliani",
                         "DisplayStartYear": "2012",
                         "Artefacts": [
                         {
                             "Id":44
                         },
                         {
                             "Id":30
                         }
                         ]
                     }
                 }
            
             </remarks>
             <response code="204">Request has succeeded</response>
             <response code="400">If one or more of the provided artefact does not exist, or if the updated artist is null</response>
             <response code="404">If no artist correspond to the provided ID</response>
             <response code="409">If the exact same artist already exist.</response>
        </member>
        <member name="M:art_gallery_api.Controllers.ArtistsController.DeleteArtist(System.Int32)">
            <summary>
            Deletes an artist.
            </summary>
            <param name="id">ID of artist to be deleted</param>
            <returns>Status Code 204</returns>
            <remarks>
            Sample request:
            DELETE /api/artefact/1
            </remarks>
            <response code="204">Request has succeeded</response>
            <response code="404">If no artist correspond to the provided ID</response>
        </member>
        <member name="M:art_gallery_api.Controllers.ArtistsController.DeleteArtefact(System.Int32,System.Int32)">
            <summary>
            Deletes an artefact within an artist.
            </summary>
            <param name="artefactId">ID of the artefact to be deleted</param>
            <param name="artistId">ID of the artist whose artefact is to be deleted</param>
            <returns>Status Code 204</returns>
            <remarks>
            Sample request:
            DELETE api/artists/artefacts/?artefactid=49&amp;artistid=3
            </remarks>
            <response code="204">Request has succeeded</response>
            <response code="404">If no artist or artefact within the artist correspond to the provided IDs</response>
        </member>
        <member name="M:art_gallery_api.Controllers.ArtTypesController.GetAllArtTypes">
            <summary>
            Gets all art types.
            </summary>
            <returns>List of all art types</returns>
            <remarks>
            Sample request:
            GET /api/art-types
            </remarks>
            <response code="200">Successful request</response>
        </member>
        <member name="M:art_gallery_api.Controllers.ArtTypesController.GetArtTypeById(System.Int32)">
            <summary>
            Gets an art type based on the specified id.
            </summary>
            <param name="id">ID of art type.</param>
            <returns>Art type based on the specified id</returns>
            <remarks>
            Sample request:
            GET /api/art-types/1
            </remarks>
            <response code="200">Successful request</response>
        </member>
        <member name="M:art_gallery_api.Controllers.ArtTypesController.AddArtType(art_gallery_api.ArtType)">
             <summary>
             Creates a new art type.
             </summary>
             <param name="newArtType">A new art type from the HTTP request.</param>
             <returns>A newly created art type</returns>
             <remarks>
             Sample request:
            
                 POST /api/art-types
                 {
                    {
                         "Name":"Poetry",
                         "Description": "Aboriginal Poetry"
                     }
                 }
            
             </remarks>
             <response code="201">Returns the newly created art type</response>
             <response code="400">If the art type in the parameter is null</response>
             <response code="409">If the exact same art type already exists.</response>
        </member>
        <member name="M:art_gallery_api.Controllers.ArtTypesController.UpdateArtType(System.Int32,art_gallery_api.ArtType)">
             <summary>
             Updates an existing art type.
             </summary>
             <param name="updatedArtType">A new art type from the HTTP request to replace the old art type.</param>
             <returns>Status Code 204</returns>
             <remarks>
             Sample request:
            
                 PUT /api/art-types/1
                 {
                    {
                         "Name":"Poetry",
                         "Description": "Aboriginal Poetry"
                     }
                 }
            
             </remarks>
             <response code="204">Request has succeeded</response>
             <response code="404">If no artefact correspond to the provided ID</response>
             <response code="409">If the updated art type has a name similar to the one existing</response>
        </member>
        <member name="M:art_gallery_api.Controllers.ArtTypesController.DeleteArtType(System.Int32)">
            <summary>
            Deletes an art type.
            </summary>
            <param name="id">ID of art type to be deleted</param>
            <returns>Status Code 204</returns>
            <remarks>
            Sample request:
            DELETE /api/art-types/1
            </remarks>
            <response code="204">Request has succeeded</response>
            <response code="404">If no art type correspond to the provided ID</response>
        </member>
        <member name="M:art_gallery_api.Controllers.SourceLocationController.GetAllSourceLocations">
            <summary>
            Gets all source locations.
            </summary>
            <returns>List of all source locations</returns>
            <remarks>
            Sample request:
            GET /api/source-locations
            </remarks>
            <response code="200">Successful request</response>
        </member>
        <member name="M:art_gallery_api.Controllers.SourceLocationController.GetSourceLocationById(System.Int32)">
            <summary>
            Gets a source location based on the specified id.
            </summary>
            <param name="id">ID of source location.</param>
            <returns>Source location based on the specified id</returns>
            <remarks>
            Sample request:
            GET /api/source-locations/1
            </remarks>
            <response code="200">Successful request</response>
        </member>
        <member name="M:art_gallery_api.Controllers.SourceLocationController.AddSourceLocation(art_gallery_api.SourceLocation)">
             <summary>
             Creates a new source location.
             </summary>
             <param name="newSourceLocation">A new source location from the HTTP request.</param>
             <returns>A newly created source location</returns>
             <remarks>
             Sample request:
            
                 POST /api/source-locations
                 {
                    {
                         "Suburb":"Doncaster",
                         "Postcode":"3108",
                         "State":"Victoria,
                         "Longitude":145.1,
                         "Latitude":37.8
                     }
                 }
            
             </remarks>
             <response code="201">Returns the newly created source location</response>
             <response code="400">If the source location in the parameter is null</response>
             <response code="409">If the source location of the same postcode already exists.</response>
        </member>
        <member name="M:art_gallery_api.Controllers.SourceLocationController.GetDistance(System.String,System.String)">
            <summary>
            Gets distance between two postcodes.
            </summary>
            <returns>Distance between two postcodes in kilometers</returns>
            <remarks>
            Sample request:
            GET /api/source-locations/distance/?postCode1=3020&amp;postCode2=3012
            </remarks>
            <response code="200">Successful request</response>
            <response code="404">If one of the postcode entered is not in the database</response>
        </member>
        <member name="M:art_gallery_api.Controllers.SourceLocationController.UpdateSourceLocation(System.Int32,art_gallery_api.SourceLocation)">
             <summary>
             Updates an existing source location.
             </summary>
             <param name="updatedSourceLocation">A new source location from the HTTP request to replace the old source location.</param>
             <returns>Status Code 204</returns>
             <remarks>
             Sample request:
            
                 PUT /api/source-locations
                 {
                    {
                         "Suburb":"Doncaster",
                         "Postcode":"3108",
                         "State":"Victoria,
                         "Longitude":145.1,
                         "Latitude":37.8
                     }
                 }
            
             </remarks>
             <response code="204">Request has succeeded</response>
             <response code="404">If no source location correspond to the provided ID</response>
             <response code="409">If the updated source location has a postcode similar to the one existing</response>
        </member>
        <member name="M:art_gallery_api.Controllers.SourceLocationController.DeleteSourceLocation(System.Int32)">
            <summary>
            Deletes an source location.
            </summary>
            <param name="id">ID of source location to be deleted</param>
            <returns>Status Code 204</returns>
            <remarks>
            Sample request:
            DELETE /api/source-locations/1
            </remarks>
            <response code="204">Request has succeeded</response>
            <response code="404">If no source location correspond to the provided ID</response>
        </member>
        <member name="M:art_gallery_api.Controllers.UsersController.GetAllUsers">
            <summary>
            Gets all user.
            </summary>
            <returns>All user</returns>
            <remarks>
            Sample request:
            GET /api/user
            </remarks>
            <response code="200">Successful request</response>
        </member>
        <member name="M:art_gallery_api.Controllers.UsersController.GetAllAdminUser">
            <summary>
            Gets all admin users
            </summary>
            <returns>All users whose role is an admin</returns>
            <remarks>
            Sample request:
            GET /api/user/admin
            </remarks>
            <returns>Status Code 204</returns>
        </member>
        <member name="M:art_gallery_api.Controllers.UsersController.GetUserById(System.Int32)">
            <summary>
            Gets user by ID
            </summary>
            <remarks>
            Sample request:
            GET /api/user/id
            </remarks>
            <returns>Status Code 204</returns>
        </member>
        <member name="M:art_gallery_api.Controllers.UsersController.AddUser(art_gallery_api.UserModel)">
             <summary>
             Creates a user.
             </summary>
             <param name="newUser">A new user from the HTTP request.</param>
             <returns>A newly created user</returns>
             <remarks>
             Sample request:
            
                 POST /api/user
                 {
                    "firstname": "Betty",
                    "lastname": "Yuliani
                 }
            
             </remarks>
             <response code="201">Returns the newly created user</response>
             <response code="400">If the user is null</response>
             <response code="409">If a user with the same name already exists.</response>
        </member>
        <member name="M:art_gallery_api.Controllers.UsersController.CreateToken(art_gallery_api.LoginModel)">
             <summary>
             Creates token for authorization.
             </summary>
             <param name="user">User login details.</param>
             <returns>Login Token</returns>
             <remarks>
             Sample request:
            
                 POST /api/user/token
                 {
                    "Email": "betty2@gmail.com",
                    "Password": "12345
                 }
            
             </remarks>
             <response code="200">Request is successful</response>
             <response code="400">If the user is null</response>
             <response code="409">If a user with the same name already exists.</response>
        </member>
        <member name="M:art_gallery_api.Controllers.UsersController.UpdateUser(System.Int32,art_gallery_api.UserModel)">
             <summary>
             Updates a user.
             </summary>
             <param name="id">ID of user to be updated</param>
             <param name="newUser">A new user to replaced the old user.</param>
             <returns>Status Code 204</returns>
             <remarks>
             Sample request:
            
                 PUT /api/user/1
                 {
                    "firstname": "updated",
                    "lasttname": "user",
                    "description": "Updated user"
                 }
            
             </remarks>
             <response code="204">Request has succeeded</response>
             <response code="404">If no user correspond to the provided ID</response>
        </member>
        <member name="M:art_gallery_api.Controllers.UsersController.DeleteUser(System.Int32)">
            <summary>
            Delete a user.
            </summary>
            <param name="id">ID of user to be deleted</param>
            <returns>Status Code 204</returns>
            <remarks>
            Sample request:
            DELETE /api/users/1
            </remarks>
            <response code="204">Request has succeeded</response>
            <response code="404">If no user correspond to the provided ID</response>
        </member>
    </members>
</doc>
